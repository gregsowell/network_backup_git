---
# this is used for tagging a repo
  - name: get timestamp
    set_fact: time="{{lookup('pipe','date \"+%Y-%m-%d-%H-%M\"')}}"
    run_once: true

# this and the following task add a private ssh key to the execution environment so it can connect to git
  - name: create .ssh folder
    become: true
    run_once: true
    delegate_to: localhost
    ansible.builtin.file:
      path: /root/.ssh
      state: directory
      mode: '0777'

  - name: create the ssh key file based on the supplied cred
    become: true
    run_once: true
    delegate_to: localhost
    ansible.builtin.copy:
      dest: ~/.ssh/id_rsa
      content: "{{ cert_key }}"
      mode: '0600'
#    no_log: true

  - name: create the backup dir
    become: true
    run_once: true
    delegate_to: localhost
    ansible.builtin.file:
      path: "{{ backup_dir }}"
      state: directory
      mode: '0777'

  - name: clone the repo
    ansible.builtin.shell: "git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'; git clone {{ backup_repo }} ."
    args:
      chdir: "{{ backup_dir }}"

  - name: include cisco task when Cisco device
    include_tasks: "{{ role_path }}/tasks/network_backup_cisco.yml"
#    include_tasks: "{{ playbook_dir }}/network_backup_cisco.yml"
    when: ansible_network_os == "asa" or ansible_network_os == "ios" or ansible_network_os == "nxos"

  - name: include arista task when Arista device
    include_tasks: "{{ role_path }}/tasks/network_backup_arista.yml"
#    include_tasks: "{{ playbook_dir }}/network_backup_arista.yml"
    when: ansible_network_os == "eos"

  - name: include junos task when Junos device
    include_tasks: "{{ role_path }}/tasks/network_backup_juniper.yml"
#    include_tasks: "{{ playbook_dir }}/network_backup_juniper.yml"
    when: ansible_network_os == "junos"

  - name: include routeros task when Mikrotik device
    include_tasks: "{{ role_path }}/tasks/network_backup_mikrotik.yml"
#    include_tasks: "{{ playbook_dir }}/network_backup_mikrotik.yml"
    when: ansible_network_os == "routeros"

  - name: Copy the backup to repo
    ansible.builtin.copy:
      src: "{{ bup_temp_file }}"
      dest: "{{ backup_file }}"
    register: copy_result
    delegate_to: localhost

  - name: Delete the temp file
    ansible.builtin.file:
      path: "{{ bup_temp_file }}"
      state: absent
    changed_when: False
    delegate_to: localhost

  - name: push the repo back with tags
    when: backup_with_tags
#    shell: "git add *; git commit -m '{{ time }}'; git push"
#    shell: "git add *; git commit -m '{{ time }}'; git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'; git push"
#    ansible.builtin.shell: "git add *; git commit -m '{{ time }}'; git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'; git tag -a {{ time }} -m '{{ time }}'; git push"
#    ansible.builtin.shell: "git add *; git commit -m '{{ time }}'; git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'; git tag -a {{ time }} -m '{{ time }}'; git push origin --tags"
#    ansible.builtin.shell: "git add *; git commit -m '{{ time }}'; git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'; git tag -a {{ time }} -m '{{ time }}'; git push --tags"
    ansible.builtin.shell: "git add *; git commit -m '{{ time }}'; git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'; git tag -a {{ time }} -m '{{ time }}'; git push; git push --tags"
    args:
      chdir: "{{ backup_dir }}{{ backup_repo_folder }}"
#      chdir: "{{ backup_dir }}{{ backup_repo_folder | default(omit) }}"
#      chdir: "{{ backup_dir }}/net_backups"
    environment:
      GIT_COMMITTER_NAME: "{{ git_name | default(omit) }}"
      GIT_COMMITTER_EMAIL: "{{ git_email | default(omit) }}"
      GIT_AUTHOR_NAME: "{{ git_name | default(omit) }}"
      GIT_AUTHOR_EMAIL: "{{ git_email | default(omit) }}"
    delegate_to: localhost
    changed_when: git_return.stderr != "Everything up-to-date"
    run_once: true
    connection: local
    register: git_return
    become: True

  - name: push the repo back with no tags
    when: not backup_with_tags
#    shell: "git add *; git commit -m '{{ time }}'; git push"
#    shell: "git add *; git commit -m '{{ time }}'; git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'; git push"
#    ansible.builtin.shell: "git add *; git commit -m '{{ time }}'; git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'; git tag -a {{ time }} -m '{{ time }}'; git push"
#    ansible.builtin.shell: "git add *; git commit -m '{{ time }}'; git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'; git tag -a {{ time }} -m '{{ time }}'; git push origin --tags"
#    ansible.builtin.shell: "git add *; git commit -m '{{ time }}'; git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'; git tag -a {{ time }} -m '{{ time }}'; git push --tags"
    ansible.builtin.shell: "git add *; git commit -m '{{ time }}'; git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'; git push"
    args:
      chdir: "{{ backup_dir }}{{ backup_repo_folder }}"
#      chdir: "{{ backup_dir }}{{ backup_repo_folder | default(omit) }}"
#      chdir: "{{ backup_dir }}/net_backups"
    environment:
      GIT_COMMITTER_NAME: "{{ git_name | default(omit) }}"
      GIT_COMMITTER_EMAIL: "{{ git_email | default(omit) }}"
      GIT_AUTHOR_NAME: "{{ git_name | default(omit) }}"
      GIT_AUTHOR_EMAIL: "{{ git_email | default(omit) }}"
    delegate_to: localhost
    changed_when: git_return.stderr != "Everything up-to-date"
    run_once: true
    connection: local
    register: git_return
    become: True
